# .github/workflows/deploy-and-run.yml

name: Deploy and Run YouTube Shorts Automation

on:
  workflow_dispatch:  # 수동 실행 활성화
  schedule:
    # 한국 시간 기준 12PM, 4PM, 9PM, 4AM, 7AM (UTC + 9시간)
    # UTC 03:00 -> KST 12:00
    # UTC 07:00 -> KST 16:00 (4PM)
    # UTC 12:00 -> KST 21:00 (9PM)
    # UTC 18:00 -> KST 03:00 (다음날 새벽 3시)
    # UTC 22:00 -> KST 07:00 (다음날 오전 7시)
    - cron: '0 3,7,12,18,22 * * *'  

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_BUCKET_NAME: ${{ secrets.GCP_BUCKET_NAME }}
  FUNCTION_NAME: youtube-shorts-automation # Cloud Function 이름
  REGION: us-central1 # Cloud Function 배포 리전 (us-central1로 고정)

jobs:
  deploy_and_run:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'  # OIDC 토큰 발급 필수

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Cloud Functions 런타임 버전과 일치

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          # Cloud Functions 런타임에 FFmpeg이 포함되어 있다면 이 명령은 필요 없습니다.
          # 만약 컨테이너 시작 실패 로그에 FFmpeg 관련 오류가 계속 나온다면,
          # Dockerfile을 사용한 Cloud Run 배포를 고려해야 합니다.
          # 현재는 Cloud Functions 2세대가 내부적으로 Cloud Run 기반이므로
          # 시스템 종속성 관리는 GCP 런타임에 의존합니다.
          # sudo apt-get update && sudo apt-get install -y ffmpeg # 이 줄은 Cloud Functions 환경에서 권장되지 않습니다.

      - name: Authenticate to Google Cloud
        id: 'auth' # ID 추가
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          # 다음은 기본값으로 사용하거나 필요시 명시
          # token_format: "access_token"
          # access_token_lifetime: "3600s"
          # access_token_scopes: "https://www.googleapis.com/auth/cloud-platform"

      - name: Deploy Cloud Function
        # Cloud Function 배포는 코드 변경 시에만 수행하거나, 스케줄 트리거 시에도 매번 최신 버전을 배포할 수 있습니다.
        # 여기서는 매번 최신 버전을 배포하여 업데이트를 보장합니다.
        run: |
          gcloud functions deploy ${{ env.FUNCTION_NAME }} \
            --runtime=python311 \
            --region=us-central1 \
            --source=. \
            --entry-point=src.main.youtube_automation_main \
            --trigger-http \
            --allow-unauthenticated \
            --memory=2048MB \
            --timeout=540s \
            --gen2 \
            --service-account=${{ secrets.WIF_SERVICE_ACCOUNT }} \
            --set-env-vars="\
            GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},\
            GCP_BUCKET_NAME=${{ env.GCP_BUCKET_NAME }},\
            ELEVENLABS_VOICE_ID=uyVNoMrnUku1dZyVEXwD"
            # Secret Manager에서 가져오는 API 키들은 여기에 포함하지 않습니다.

      - name: Get Cloud Function URL
        id: get_url
        run: |
          FUNCTION_URL=$(gcloud functions describe ${{ env.FUNCTION_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(url)')
          echo "FUNCTION_URL=${FUNCTION_URL}" >> $GITHUB_OUTPUT # 다음 단계에서 사용하도록 출력

      - name: Invoke Cloud Function
        env:
          FUNCTION_URL: ${{ steps.get_url.outputs.FUNCTION_URL }}
        run: |
          if [ -z "$FUNCTION_URL" ]; then
            echo "Error: Cloud Function URL not found. Cannot invoke."
            exit 1
          fi
          echo "Invoking Cloud Function at: $FUNCTION_URL"
          curl -X POST "$FUNCTION_URL" \
               -H "Content-Type: application/json" \
               -d '{"daily_run": true}'
          echo "Cloud Function invocation initiated."

      - name: Monitor Cloud Function Logs (for debugging)
        # 배포 및 호출 후 즉시 로그를 확인하여 디버깅을 돕습니다.
        # 실제 운영에서는 Cloud Monitoring에서 알림을 설정하는 것이 좋습니다.
        run: |
          echo "Fetching recent Cloud Function logs..."
          # `gcloud logging read`를 사용하여 Cloud Run 로그를 직접 조회합니다.
          # `resource.type="cloud_run_revision"` and `resource.labels.service_name="${{ env.FUNCTION_NAME }}"` 필터를 사용합니다.
          # Cloud Functions 2세대는 내부적으로 Cloud Run을 사용합니다.
          gcloud logging read \
            'resource.type="cloud_run_revision" AND resource.labels.service_name="${{ env.FUNCTION_NAME }}"' \
            --project=${{ env.GCP_PROJECT_ID }} \
            --limit=50 \
            --format=json \
            --order=desc \
            --freshness=5m # 최근 5분 이내 로그만 가져옴

        if: always() # 실패하더라도 로그를 확인하도록 설정
