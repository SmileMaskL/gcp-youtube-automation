name: GCP Youtube Automation CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: 'read'
  id-token: 'write'

env:
  PROJECT_ID: youtube-fully-automated
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev/youtube-fully-automated/gcp-youtube-automation
  SERVICE_NAME: gcp-youtube-automation
  REGION: us-central1
  GCP_BUCKET_NAME: yt-auto-bucket-001
  GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
  CLOUD_RUN_URL: https://gcp-youtube-automation-abcdefg-uc.a.run.app
  # 🔥 변경된 부분 (Audience 고정)
  GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
  GITHUB_AUDIENCE: https://token.actions.githubusercontent.com

jobs:
  deploy-and-automate:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      # 🔥 변경된 인증 단계 (audience 명시적 추가)
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
          # audience: ${{ env.GITHUB_AUDIENCE }}
          create_credentials_file: true

      - name: ⚙️ Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      # 🔥 Secret Manager 권한 확인 추가
      - name: 🔑 Verify Secret Manager Access
        run: |
          gcloud secrets list --project=$PROJECT_ID
          gcloud iam service-accounts get-iam-policy $GCP_SERVICE_ACCOUNT

      # 🔥 변경된 시크릿 로드 방식 (에러 핸들링 추가)
      - name: 🔑 Load Secrets
        run: |
          secrets=(
            "PEXELS_API_KEY"
            "YOUTUBE_CLIENT_ID"
            "YOUTUBE_CLIENT_SECRET"
            "YOUTUBE_REFRESH_TOKEN"
            "OPENAI_API_KEYS"
            "GEMINI_API_KEY"
            "ELEVENLABS_API_KEY"
          )
          for secret in "${secrets[@]}"; do
            echo "Loading $secret..."
            val=$(gcloud secrets versions access latest --secret=$secret --project=$PROJECT_ID || echo "")
            if [ -z "$val" ]; then
              echo "::warning::Failed to load $secret"
            else
              echo "$secret=***" >> $GITHUB_ENV
              echo "$secret"_SECRET="$val" >> $GITHUB_ENV
            fi
          done

      # 🔥 단일 Docker 빌드/푸시로 통합
      - name: 🐳 Build & Push Docker Image
        run: |
          docker build -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:$GITHUB_SHA .
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:$GITHUB_SHA

      # ... (이하 동일) ...

      - name: Build Docker image
        run: docker build -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} . # <-- 이미지 빌드

      - name: Push Docker image to Artifact Registry # <-- 이미지 푸시 단계!
        run: docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} # <-- 바로 여기에! 네 그 명령어!

      - name: 🚀 Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --min-instances=0 \
            --max-instances=1 \
            --cpu=1 \
            --memory=512Mi \
            --set-env-vars="PEXELS_API_KEY=$PEXELS_API_KEY" \
            --set-env-vars="YOUTUBE_CLIENT_ID=$YOUTUBE_CLIENT_ID" \
            --set-env-vars="YOUTUBE_CLIENT_SECRET=$YOUTUBE_CLIENT_SECRET" \
            --set-env-vars="YOUTUBE_REFRESH_TOKEN=$YOUTUBE_REFRESH_TOKEN" \
            --set-env-vars="OPENAI_API_KEYS=$OPENAI_API_KEYS" \
            --set-env-vars="GEMINI_API_KEY=$GEMINI_API_KEY" \
            --set-env-vars="ELEVENLABS_API_KEY=$ELEVENLABS_API_KEY" \
            --set-env-vars="ENVIRONMENT=production"

      - name: 🎬 Run YouTube Shorts Generator
        run: |
          echo "▶️ Generating content..."
          python scripts/content_generator.py \
            --pexels-key "$PEXELS_API_KEY" \
            --openai-key "$OPENAI_API_KEYS" \
            --gemini-key "$GEMINI_API_KEY"

          echo "📤 Uploading to YouTube..."
          python scripts/uploader.py \
            --client-id "$YOUTUBE_CLIENT_ID" \
            --client-secret "$YOUTUBE_CLIENT_SECRET" \
            --refresh-token "$YOUTUBE_REFRESH_TOKEN"

          echo "✅ All automation completed!"

      - name: 📡 Call Cloud Run Status Endpoint
        run: |
          ID_TOKEN=$(gcloud auth print-identity-token)
          curl -X POST \
            -H "Authorization: Bearer ${ID_TOKEN}" \
            -H "Content-Type: application/json" \
            ${{ env.CLOUD_RUN_URL }}/status \
            -d '{"action":"check"}'

      - name: 🧹 Cleanup Old Docker Images
        if: always()
        run: |
          chmod +x cleanup-repo-fixed.sh
          ./cleanup-repo-fixed.sh
