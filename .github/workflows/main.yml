name: GCP Youtube Automation CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: 'read'
  id-token: 'write'

env:
  SERVICE_NAME: gcp-youtube-automation
  IMAGE_NAME: gcp-youtube-automation
  PROJECT_ID: youtube-fully-automated
  GCP_WORKLOAD_IDENTITY_PROVIDER: projects/94662874801/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev/youtube-fully-automated/gcp-youtube-automation
  REGION: us-central1
  GCP_BUCKET_NAME: yt-auto-bucket-001
  GCP_SERVICE_ACCOUNT: github-actions-sa@youtube-fully-automated.iam.gserviceaccount.com
  CLOUD_RUN_URL: https://gcp-youtube-automation-abcdefg-uc.a.run.app
  GITHUB_AUDIENCE: https://token.actions.githubusercontent.com

jobs:
  deploy-and-automate:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
          audience: ${{ env.GITHUB_AUDIENCE }}
          create_credentials_file: true

      - name: ⚙️ Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: 🔑 Configure Docker for Artifact Registry
        run: |
          echo "🔑 Docker 인증 설정 중..."
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: 🐳 Build & Push Docker Image
        run: |
          echo "🔨 Docker 이미지 빌드 중..."
          docker build -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker build -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
          
          echo "🚀 Docker 이미지 푸시 중..."
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: 🚀 Deploy to Cloud Run
        run: |
          echo "☁️ Cloud Run 배포 중..."
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --min-instances=0 \
            --max-instances=3 \
            --cpu=1 \
            --memory=1Gi \
            --timeout=300 \
            --concurrency=10 \
            --port=8080 \
            --set-env-vars="ENVIRONMENT=production" \
            --set-env-vars="PROJECT_ID=${{ env.PROJECT_ID }}" \
            --set-env-vars="BUCKET_NAME=${{ env.GCP_BUCKET_NAME }}" \
            --set-env-vars="ELEVENLABS_VOICE_ID=uyVNoMrnUku1dZyVEXwD" \
            --quiet

      - name: 🎬 Generate and Upload YouTube Content
        run: |
          echo "📝 YouTube 컨텐츠 생성 및 업로드 중..."
          ID_TOKEN=$(gcloud auth print-identity-token)
          
          # 컨텐츠 생성 및 업로드 요청
          curl -X POST \
            -H "Authorization: Bearer ${ID_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{"action": "generate_and_upload", "topics": ["AI기술", "프로그래밍", "창업", "투자", "부업"]}' \
            ${{ env.CLOUD_RUN_URL }}/api/content/generate \
            --max-time 300 \
            --retry 3 \
            --retry-delay 10

      - name: 📊 Check Status
        if: always()
        run: |
          echo "📊 상태 확인 중..."
          ID_TOKEN=$(gcloud auth print-identity-token)
          curl -X GET \
            -H "Authorization: Bearer ${ID_TOKEN}" \
            ${{ env.CLOUD_RUN_URL }}/api/status \
            --max-time 30

      - name: 🧹 Cleanup Old Images
        if: always()
        run: |
          echo "🧹 오래된 이미지 정리 중..."
          # 최근 5개 버전만 유지
          gcloud artifacts docker images list ${{ env.ARTIFACT_REGISTRY }}/${{ env.IMAGE_NAME }} \
            --format="value(IMAGE)" \
            --sort-by="~UPDATE_TIME" \
            --limit=100 | tail -n +6 | xargs -r gcloud artifacts docker images delete --quiet || echo "정리할 이미지가 없습니다."
