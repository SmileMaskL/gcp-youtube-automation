# 파일 위치: .github/workflows/main.yml

name: GCP Youtube Automation CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 수동 실행 허용

permissions:
  contents: 'read'
  id-token: 'write'

env:
  PROJECT_ID: youtube-fully-automated
  SERVICE_NAME: gcp-youtube-automation
  REGION: us-central1
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  GCP_WORKLOAD_IDENTITY_PROVIDER: projects/94662874801/locations/global/workloadIdentityPools/github-pool-v2/providers/github-provider-final
  GCP_SERVICE_ACCOUNT: github-actions-sa@youtube-fully-automated.iam.gserviceaccount.com
  CLOUD_RUN_URL: https://gcp-youtube-automation-abcdefg-uc.a.run.app

jobs:
  deploy-and-automate:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # 1. 저장소 코드 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
          audience: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Upload file to GCS
        run: |
          # 임시 파일 생성
          echo "This file was uploaded by GitHub Actions at $(date)" > test_upload.txt
          
          # GCS에 파일 업로드
          gsutil cp test_upload.txt gs://${{ env.GCP_BUCKET_NAME }}/
          
          # 업로드 확인
          gsutil ls gs://${{ env.GCP_BUCKET_NAME }}/
          
          # 파일 내용 확인
          gsutil cat gs://${{ env.GCP_BUCKET_NAME }}/test_upload.txt

      - name: Verify upload
        run: |
          echo "✅ File successfully uploaded to gs://${{ env.GCP_BUCKET_NAME }}/test_upload.txt"
          echo "📅 Upload time: $(date)"

      # 2. GCP 인증 (오류 해결 핵심)
      - id: 'auth'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
          audience: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      # 3. gcloud SDK 설치
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      # 4. Python 환경 설정
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 5. Python 의존성 설치
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 6. Secret Manager에서 API 키 불러오기
      - name: Load Secrets from Google Secret Manager
        run: |
          secrets=(
            "PEXELS_API_KEY"
            "YOUTUBE_CLIENT_ID"
            "YOUTUBE_CLIENT_SECRET"
            "YOUTUBE_REFRESH_TOKEN"
            "OPENAI_API_KEYS"
            "GEMINI_API_KEY"
            "ELEVENLABS_API_KEY"
          )

          for secret in "${secrets[@]}"; do
            echo "${secret}=$(gcloud secrets versions access latest --secret=${secret} --project=${{ env.PROJECT_ID }})" >> $GITHUB_ENV
          done

      # 7. Docker 이미지 빌드 및 푸시
      - name: Build & Push Docker Image to Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }} --quiet
          docker build -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest .
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

      # 8. Cloud Run 배포
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --min-instances=0 \
            --max-instances=1 \
            --cpu=1 \
            --memory=512Mi \
            --set-env-vars="PEXELS_API_KEY=$PEXELS_API_KEY" \
            --set-env-vars="YOUTUBE_CLIENT_ID=$YOUTUBE_CLIENT_ID" \
            --set-env-vars="YOUTUBE_CLIENT_SECRET=$YOUTUBE_CLIENT_SECRET" \
            --set-env-vars="YOUTUBE_REFRESH_TOKEN=$YOUTUBE_REFRESH_TOKEN" \
            --set-env-vars="OPENAI_API_KEYS=$OPENAI_API_KEYS" \
            --set-env-vars="GEMINI_API_KEY=$GEMINI_API_KEY" \
            --set-env-vars="ELEVENLABS_API_KEY=$ELEVENLABS_API_KEY" \
            --set-env-vars="ENVIRONMENT=production"

      # 9. 자동 콘텐츠 생성 및 업로드 실행
      - name: Run YouTube Shorts Generator
        run: |
          echo "🎬 Generating video content..."
          python scripts/content_generator.py \
            --pexels-key "$PEXELS_API_KEY" \
            --openai-key "$OPENAI_API_KEYS" \
            --gemini-key "$GEMINI_API_KEY"

          echo "📤 Uploading video to YouTube..."
          python scripts/uploader.py \
            --client-id "$YOUTUBE_CLIENT_ID" \
            --client-secret "$YOUTUBE_CLIENT_SECRET" \
            --refresh-token "$YOUTUBE_REFRESH_TOKEN"

          echo "✅ Automation finished!"

      # 10. 결과 상태 확인 (선택)
      - name: Check Automation Status
        run: |
          curl -X POST \
            -H "Authorization: Bearer $(gcloud auth print-identity-token)" \
            -H "Content-Type: application/json" \
            ${{ env.CLOUD_RUN_URL }}/status \
            -d '{"action":"check"}'

      # 11. 불필요한 이미지 정리
      - name: Cleanup Old Docker Images
        if: always()
        run: |
          chmod +x cleanup-repo-fixed.sh
          ./cleanup-repo-fixed.sh
