name: GCP YouTube Automation CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SERVICE_NAME: gcp-youtube-automation
  REGION: us-central1
  PROJECT_ID: youtube-fully-automated
  WORKLOAD_IDENTITY_PROVIDER: "projects/94662874801/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider-v1"
  SERVICE_ACCOUNT: github-actions-sa@youtube-fully-automated.iam.gserviceaccount.com

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  setup:  # setup-auth 대신 setup으로 통합
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Google Cloud 인증
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ env.SERVICE_ACCOUNT }}
        access_token_lifetime: 3600s
        # audience는 기본값 사용

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker
      run: gcloud auth configure-docker asia-northeast3-docker.pkg.dev

  deploy:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Google Cloud 인증
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ env.SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.13'

    - name: 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 썸네일 자동 생성
      run: python3 src/thumbnail_generator.py

    - name: 댓글 자동화
      run: python3 src/comment_poster.py

    # 여기서는 시크릿을 로드하지 않음. generate-content에서 로드

  generate-content:
    runs-on: ubuntu-latest
    needs: [setup]  # deploy는 필요없음
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Google Cloud 인증
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ env.SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Secret Manager에서 시크릿 로드
      id: load-secrets
      run: |
        echo "🔐 시크릿 로드 시작"
        
        declare -A secret_map=(
          ["OPENAI_API_KEY"]="openai-api-keys"
          ["GEMINI_API_KEY"]="gemini-api-key"
          ["ELEVENLABS_API_KEY"]="elevenlabs-api-key"
          ["YOUTUBE_CREDENTIALS"]="youtube-oauth-credentials"
          ["STORAGE_BUCKET"]="storage-bucket-name"
          ["PEXELS_API_KEY"]="PEXELS_API_KEY"
        )
        
        for env_var in "${!secret_map[@]}"; do
          secret_name=${secret_map[$env_var]}
          echo "[시크릿] $env_var 로드: $secret_name"
          
          secret_value=$(gcloud secrets versions access latest \
            --secret=$secret_name \
            --project=$PROJECT_ID \
            --format="value(data)")
            
          # JSON 형식 시크릿 처리
          if [[ $secret_name == *"credentials"* ]]; then
            echo "$env_var<<EOF" >> $GITHUB_ENV
            echo "$secret_value" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "$env_var=$secret_value" >> $GITHUB_ENV
          fi
          echo "✅ $env_var 설정 완료"
        done

    - name: Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.13'

    - name: 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 매일 수익화되는 콘텐츠 생성
      env:
        OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
        GEMINI_API_KEY: ${{ env.GEMINI_API_KEY }}
        ELEVENLABS_API_KEY: ${{ env.ELEVENLABS_API_KEY }}
        YOUTUBE_CREDENTIALS: ${{ env.YOUTUBE_CREDENTIALS }}
        STORAGE_BUCKET: ${{ env.STORAGE_BUCKET }}
        PEXELS_API_KEY: ${{ env.PEXELS_API_KEY }}
      run: |
        # 무료 한도 내에서 실행 (하루 3개)
        MAX_VIDEOS=3
        
        # 수익화 가능한 주제 리스트
        MONETIZABLE_TOPICS=(
          "인공지능으로 수익내는 법"
          "무인 자동화 시스템 구축"
          "코딩 없이 AI로 매일 50만원 버는 방법"
          "유튜브 자동화로 월 1억 만들기"
          "구글 클라우드 무료 활용법"
        )
        
        VIDEO_COUNT=0
        
        for topic in "${MONETIZABLE_TOPICS[@]}"; do
          if [ $VIDEO_COUNT -ge $MAX_VIDEOS ]; then
            echo "🚀 오늘 최대 무료 한도 완료! 총 $VIDEO_COUNT개 영상 생성"
            break
          fi
          
          echo "🤑 수익화 영상 생성: $topic"
          DURATION=$(( 180 + RANDOM % 300 ))  # 3~8분
          
          # 실제 스크립트 실행
          python3 src/content_generator.py --topic "$topic"
          python3 src/video_creator.py --topic "$topic" --duration $DURATION
          python3 src/thumbnail_generator.py --topic "$topic"
          python3 src/youtube_uploader.py --topic "$topic"
          
          SLEEP_TIME=$(( 300 + RANDOM % 300 ))  # 5~10분 대기
          echo "⏱ 다음 영상까지 $(($SLEEP_TIME/60))분 후"
          sleep $SLEEP_TIME
          
          ((VIDEO_COUNT++))
        done
        
        echo "✅ 오늘 총 $VIDEO_COUNT개 수익화 영상 생성 완료! 예상 수익: $(($VIDEO_COUNT * 50000))원"
