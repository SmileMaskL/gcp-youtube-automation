name: GCP YouTube Automation CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SERVICE_NAME: gcp-youtube-automation
  REGION: us-central1
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  setup-auth:
    runs-on: ubuntu-latest
    outputs:
      project_id: ${{ env.PROJECT_ID }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/94662874801/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider-v1'
        service_account: 'github-actions-sa@youtube-fully-automated.iam.gserviceaccount.com'
        create_credentials_file: true
        access_token_lifetime: 3600s
        audience: 'https://token.actions.githubusercontent.com'

  deploy:
    runs-on: ubuntu-latest
    needs: setup-auth
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker asia-northeast3-docker.pkg.dev
    
    - name: Get secrets from Secret Manager
      id: secrets
      run: |
        echo "Getting secrets from Secret Manager..."
        
        # OpenAI API Key
        OPENAI_API_KEY=$(gcloud secrets versions access latest \
          --secret="openai-api-key" \
          --project="${{ env.PROJECT_ID }}" \
          --account="${{ secrets.WIF_SERVICE_ACCOUNT }}" \
          --impersonate-service-account github-actions-sa@youtube-fully-automated.iam.gserviceaccount.com \
          --format="value(data)")
        echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> $GITHUB_ENV
        
        # Gemini API Key
        GEMINI_API_KEY=$(gcloud secrets versions access latest \
          --secret="gemini-api-key" \
          --project="${{ env.PROJECT_ID }}" \
          --account="${{ secrets.WIF_SERVICE_ACCOUNT }}" \
          --impersonate-service-account github-actions-sa@youtube-fully-automated.iam.gserviceaccount.com \
          --format="value(data)")
        echo "GEMINI_API_KEY=$GEMINI_API_KEY" >> $GITHUB_ENV
        
        # ElevenLabs API Key
        ELEVENLABS_API_KEY=$(gcloud secrets versions access latest \
          --secret="elevenlabs-api-key" \
          --project="${{ env.PROJECT_ID }}" \
          --account="${{ secrets.WIF_SERVICE_ACCOUNT }}" \
          --impersonate-service-account github-actions-sa@youtube-fully-automated.iam.gserviceaccount.com \
          --format="value(data)")
        echo "ELEVENLABS_API_KEY=$ELEVENLABS_API_KEY" >> $GITHUB_ENV
        
        # YouTube OAuth Credentials
        YOUTUBE_CREDENTIALS=$(gcloud secrets versions access latest \
          --secret="youtube-oauth-credentials" \
          --project="${{ env.PROJECT_ID }}" \
          --account="${{ secrets.WIF_SERVICE_ACCOUNT }}" \
          --impersonate-service-account github-actions-sa@youtube-fully-automated.iam.gserviceaccount.com \
          --format="value(data)")
        echo "YOUTUBE_CREDENTIALS=$YOUTUBE_CREDENTIALS" >> $GITHUB_ENV
        
        # Storage Bucket Name
        STORAGE_BUCKET=$(gcloud secrets versions access latest \
          --secret="storage-bucket-name" \
          --project="${{ env.PROJECT_ID }}" \
          --account="${{ secrets.WIF_SERVICE_ACCOUNT }}" \
          --impersonate-service-account github-actions-sa@youtube-fully-automated.iam.gserviceaccount.com \
          --format="value(data)")
        echo "STORAGE_BUCKET=$STORAGE_BUCKET" >> $GITHUB_ENV

  generate-content:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Generate and upload monetizable content
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
        
        MONETIZABLE_TOPICS=(
          "AI로 유튜브 자동화해서 수익 올리는 법"
          "2024년 가장 수익률 높은 부업 TOP5"
          "집에서 컴퓨터만으로 월 200만원 버는 방법"
          "초보자를 위한 주식 투자 가이드"
          "유튜브 알고리즘을 활용한 조회수 폭증 전략"
          "무료 AI 도구로 콘텐츠 제작하는 법"
          "파이썬 자동화로 수익 창출하기"
          "구글 애드센스 승인을 위한 필수 가이드"
          "노코드로 시작하는 온라인 비즈니스"
          "챗GPT로 유튜브 스크립트 자동 생성하기"
        )
        
        for topic in "${MONETIZABLE_TOPICS[@]}"; do
          echo "Generating monetizable content for: $topic"
          DURATION=$(( 180 + RANDOM % 300 ))
          
          curl -X POST "$SERVICE_URL/generate" \
            -H "Content-Type: application/json" \
            -d "{
              \"topic\": \"$topic\",
              \"style\": \"engaging\",
              \"duration\": $DURATION,
              \"monetization\": true,
              \"call_to_action\": true
            }" \
            --max-time 3600 \
            --retry 2 \
            --retry-delay 30
          
          SLEEP_TIME=$(( 300 + RANDOM % 300 ))
          echo "Waiting for $SLEEP_TIME seconds before next generation..."
          sleep $SLEEP_TIME
        done
