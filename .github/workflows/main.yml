name: GCP YouTube Automation CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # 6시간마다 실행 (하루 4번)

env:
  SERVICE_NAME: gcp-youtube-automation
  REGION: asia-northeast3
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  setup-auth:
    runs-on: ubuntu-latest
    outputs:
      project_id: ${{ env.PROJECT_ID }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
        create_credentials_file: true
        access_token_lifetime: 3600s
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

  deploy:
    runs-on: ubuntu-latest
    needs: setup-auth
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker asia-northeast3-docker.pkg.dev
    
    - name: Get secrets from Secret Manager
      id: secrets
      run: |
        echo "Getting secrets from Secret Manager..."
        
        # OpenAI API Key
        OPENAI_API_KEY=$(gcloud secrets versions access latest \
          --secret="openai-api-key" \
          --project="${{ env.PROJECT_ID }}")
        echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> $GITHUB_ENV
        
        # Gemini API Key
        GEMINI_API_KEY=$(gcloud secrets versions access latest \
          --secret="gemini-api-key" \
          --project="${{ env.PROJECT_ID }}")
        echo "GEMINI_API_KEY=$GEMINI_API_KEY" >> $GITHUB_ENV
        
        # ElevenLabs API Key
        ELEVENLABS_API_KEY=$(gcloud secrets versions access latest \
          --secret="elevenlabs-api-key" \
          --project="${{ env.PROJECT_ID }}")
        echo "ELEVENLABS_API_KEY=$ELEVENLABS_API_KEY" >> $GITHUB_ENV
        
        # YouTube OAuth Credentials
        YOUTUBE_CREDENTIALS=$(gcloud secrets versions access latest \
          --secret="youtube-oauth-credentials" \
          --project="${{ env.PROJECT_ID }}")
        echo "YOUTUBE_CREDENTIALS=$YOUTUBE_CREDENTIALS" >> $GITHUB_ENV
        
        # Storage Bucket Name
        STORAGE_BUCKET=$(gcloud secrets versions access latest \
          --secret="storage-bucket-name" \
          --project="${{ env.PROJECT_ID }}")
        echo "STORAGE_BUCKET=$STORAGE_BUCKET" >> $GITHUB_ENV
    
    - name: Build Docker image
      run: |
        IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        
        docker build \
          --build-arg OPENAI_API_KEY="${{ env.OPENAI_API_KEY }}" \
          --build-arg GEMINI_API_KEY="${{ env.GEMINI_API_KEY }}" \
          --build-arg ELEVENLABS_API_KEY="${{ env.ELEVENLABS_API_KEY }}" \
          --build-arg YOUTUBE_CREDENTIALS="${{ env.YOUTUBE_CREDENTIALS }}" \
          --build-arg STORAGE_BUCKET="${{ env.STORAGE_BUCKET }}" \
          --build-arg GCP_PROJECT_ID="${{ env.PROJECT_ID }}" \
          -t $IMAGE_TAG .
    
    - name: Push Docker image
      run: |
        docker push ${{ env.IMAGE_TAG }}
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image=${{ env.IMAGE_TAG }} \
          --platform=managed \
          --region=${{ env.REGION }} \
          --allow-unauthenticated \
          --memory=2Gi \
          --cpu=1 \
          --timeout=3600 \
          --concurrency=1 \
          --max-instances=1 \
          --set-env-vars="GCP_PROJECT_ID=${{ env.PROJECT_ID }}" \
          --set-env-vars="STORAGE_BUCKET=${{ env.STORAGE_BUCKET }}" \
          --service-account="${{ secrets.WIF_SERVICE_ACCOUNT }}"
    
    - name: Run initial content generation
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
        
        echo "Service URL: $SERVICE_URL"
        
        # 컨텐츠 생성 트리거 (수익화 가능한 주제로 변경)
        curl -X POST "$SERVICE_URL/generate" \
          -H "Content-Type: application/json" \
          -d '{
            "topic": "AI로 월 100만원 버는 방법",
            "style": "informative",
            "duration": 300,
            "monetization": true
          }' \
          --max-time 3600 \
          --retry 3 \
          --retry-delay 10

  generate-content:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Generate and upload monetizable content
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
        
        # 수익화 가능한 주제 리스트 (실제로 검증된 주제들)
        MONETIZABLE_TOPICS=(
          "AI로 유튜브 자동화해서 수익 올리는 법"
          "2024년 가장 수익률 높은 부업 TOP5"
          "집에서 컴퓨터만으로 월 200만원 버는 방법"
          "초보자를 위한 주식 투자 가이드"
          "유튜브 알고리즘을 활용한 조회수 폭증 전략"
          "무료 AI 도구로 콘텐츠 제작하는 법"
          "파이썬 자동화로 수익 창출하기"
          "구글 애드센스 승인을 위한 필수 가이드"
          "노코드로 시작하는 온라인 비즈니스"
          "챗GPT로 유튜브 스크립트 자동 생성하기"
        )
        
        for topic in "${MONETIZABLE_TOPICS[@]}"; do
          echo "Generating monetizable content for: $topic"
          
          # 랜덤한 영상 길이 (3~8분 사이)
          DURATION=$(( 180 + RANDOM % 300 ))
          
          curl -X POST "$SERVICE_URL/generate" \
            -H "Content-Type: application/json" \
            -d "{
              \"topic\": \"$topic\",
              \"style\": \"engaging\",
              \"duration\": $DURATION,
              \"monetization\": true,
              \"call_to_action\": true
            }" \
            --max-time 3600 \
            --retry 2 \
            --retry-delay 30
          
          # 각 생성 사이에 5~10분 랜덤 대기 (API 제한 회피)
          SLEEP_TIME=$(( 300 + RANDOM % 300 ))
          echo "Waiting for $SLEEP_TIME seconds before next generation..."
          sleep $SLEEP_TIME
        done
