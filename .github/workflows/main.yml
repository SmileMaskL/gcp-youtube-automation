name: GCP Youtube Automation CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # ÏàòÎèô Ïã§Ìñâ ÌóàÏö©

env:
  PROJECT_ID: youtube-fully-automated
  SERVICE_NAME: gcp-youtube-automation
  REGION: us-central1
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  GCP_BUCKET_NAME: yt-auto-bucket-001
  GCP_SERVICE_ACCOUNT: github-actions-sa@youtube-fully-automated.iam.gserviceaccount.com
  CLOUD_RUN_URL: https://gcp-youtube-automation-abcdefg-uc.a.run.app
  GCP_WORKLOAD_IDENTITY_PROVIDER: projects/94662874801/locations/global/workloadIdentityPools/github-pool-v3/providers/github-provider

jobs:
  deploy-and-automate:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: üìÅ Checkout Repository
        uses: actions/checkout@v4

      - name: üîê Authenticate to Google Cloud (Workload Identity)
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
          audience: "https://token.actions.githubusercontent.com"

      - name: üß™ GCP Î™ÖÎ†πÏñ¥ ÌÖåÏä§Ìä∏
        run: |
          gcloud config set project $PROJECT_ID
          gcloud storage buckets list

      - name: ‚öôÔ∏è Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'beta'

      - name: üß™ Test GCS Upload
        run: |
          echo "Uploaded from GitHub Actions at $(date)" > test_upload.txt
          gsutil cp test_upload.txt gs://${{ env.GCP_BUCKET_NAME }}/
          gsutil ls gs://${{ env.GCP_BUCKET_NAME }}/

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üì¶ Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üîë Load Secrets from Secret Manager
        run: |
          secrets=(
            "PEXELS_API_KEY"
            "YOUTUBE_CLIENT_ID"
            "YOUTUBE_CLIENT_SECRET"
            "YOUTUBE_REFRESH_TOKEN"
            "OPENAI_API_KEYS"
            "GEMINI_API_KEY"
            "ELEVENLABS_API_KEY"
          )
          for secret in "${secrets[@]}"; do
            val="$(gcloud secrets versions access latest --secret=${secret} --project=${{ env.PROJECT_ID }})"
            echo "${secret}=${val}" >> $GITHUB_ENV
          done

      - name: üê≥ Build & Push Docker Image to Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }} --quiet
          docker build -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest .
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

      - name: üöÄ Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --min-instances=0 \
            --max-instances=1 \
            --cpu=1 \
            --memory=512Mi \
            --set-env-vars="PEXELS_API_KEY=$PEXELS_API_KEY" \
            --set-env-vars="YOUTUBE_CLIENT_ID=$YOUTUBE_CLIENT_ID" \
            --set-env-vars="YOUTUBE_CLIENT_SECRET=$YOUTUBE_CLIENT_SECRET" \
            --set-env-vars="YOUTUBE_REFRESH_TOKEN=$YOUTUBE_REFRESH_TOKEN" \
            --set-env-vars="OPENAI_API_KEYS=$OPENAI_API_KEYS" \
            --set-env-vars="GEMINI_API_KEY=$GEMINI_API_KEY" \
            --set-env-vars="ELEVENLABS_API_KEY=$ELEVENLABS_API_KEY" \
            --set-env-vars="ENVIRONMENT=production"

      - name: üé¨ Run YouTube Shorts Generator
        run: |
          echo "‚ñ∂Ô∏è Generating content..."
          python scripts/content_generator.py \
            --pexels-key "$PEXELS_API_KEY" \
            --openai-key "$OPENAI_API_KEYS" \
            --gemini-key "$GEMINI_API_KEY"

          echo "üì§ Uploading to YouTube..."
          python scripts/uploader.py \
            --client-id "$YOUTUBE_CLIENT_ID" \
            --client-secret "$YOUTUBE_CLIENT_SECRET" \
            --refresh-token "$YOUTUBE_REFRESH_TOKEN"

          echo "‚úÖ All automation completed!"

      - name: üì° Call Cloud Run Status Endpoint
        run: |
          ID_TOKEN=$(gcloud auth print-identity-token)
          curl -X POST \
            -H "Authorization: Bearer ${ID_TOKEN}" \
            -H "Content-Type: application/json" \
            ${{ env.CLOUD_RUN_URL }}/status \
            -d '{"action":"check"}'

      - name: üßπ Cleanup Old Docker Images
        if: always()
        run: |
          chmod +x cleanup-repo-fixed.sh
          ./cleanup-repo-fixed.sh
