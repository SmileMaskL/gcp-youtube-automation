name: GCP YouTube Automation CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SERVICE_NAME: gcp-youtube-automation
  REGION: us-central1
  PROJECT_ID: youtube-fully-automated
  WORKLOAD_IDENTITY_PROVIDER: "projects/94662874801/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider-v1"
  SERVICE_ACCOUNT: github-actions-sa@youtube-fully-automated.iam.gserviceaccount.com

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  setup-auth:
    runs-on: ubuntu-latest
    outputs:
      project_id: ${{ env.PROJECT_ID }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Google Cloud 인증
      id: auth  # id를 여기서 지정
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ env.SERVICE_ACCOUNT }}
        token_format: "access_token"
        access_token_scopes: "https://www.googleapis.com/auth/cloud-platform"
        audience: "https://token.actions.githubusercontent.com"
        access_token_lifetime: 3600s

  deploy:
    runs-on: ubuntu-latest
    needs: setup-auth
    env:
      PROJECT_ID: ${{ needs.setup-auth.outputs.project_id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.13'

    - name: 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 썸네일 자동 생성
      run: python3 src/thumbnail_generator.py

    - name: 댓글 자동화
      run: python3 src/comment_poster.py

  generate-content:
    runs-on: ubuntu-latest
    needs: setup-auth  # deploy 대신 setup-auth만 필요
    env:
      PROJECT_ID: ${{ needs.setup-auth.outputs.project_id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Google Cloud 인증
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ env.SERVICE_ACCOUNT }}
        token_format: "access_token"

    - name: Cloud SDK 설정
      uses: google-github-actions/setup-gcloud@v2  # 인증 후 SDK 설정
    
    - name: Secret Manager에서 시크릿 로드
      run: |
        echo "🔐 수익화 시크릿 로드 시작"
        declare -A secret_map=(
          ["OPENAI_API_KEY"]="openai-api-keys"
          ["GEMINI_API_KEY"]="gemini-api-key"
          ["ELEVENLABS_API_KEY"]="elevenlabs-api-key"
          ["YOUTUBE_CREDENTIALS"]="youtube-oauth-credentials"
          ["STORAGE_BUCKET"]="storage-bucket-name"
          ["PEXELS_API_KEY"]="PEXELS_API_KEY"
        )
        
        for env_var in "${!secret_map[@]}"; do
          secret_name=${secret_map[$env_var]}
          echo "[수익화] $env_var 로드: $secret_name"
          
          secret_value=$(gcloud secrets versions access latest \
            --secret=$secret_name \
            --project=$PROJECT_ID \
            --format="value(data)")
            
          if [[ $secret_name == *"credentials"* ]]; then
            echo "$env_var='$secret_value'" >> $GITHUB_ENV
          else
            echo "$env_var=$secret_value" >> $GITHUB_ENV
          fi
          echo "✅ $env_var 설정 완료"
        done

    - name: Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.13'

    - name: 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 매일 수익화 콘텐츠 생성
      env:
        OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
        GEMINI_API_KEY: ${{ env.GEMINI_API_KEY }}
        ELEVENLABS_API_KEY: ${{ env.ELEVENLABS_API_KEY }}
        YOUTUBE_CREDENTIALS: ${{ env.YOUTUBE_CREDENTIALS }}
        STORAGE_BUCKET: ${{ env.STORAGE_BUCKET }}
        PEXELS_API_KEY: ${{ env.PEXELS_API_KEY }}
      run: |
        # 무료 한도 내 최대 생산량 (월 $300 한도 고려)
        MAX_VIDEOS=5  # 1개 영상당 약 $0.5 예상
        
        # 검증된 수익화 주제 목록 (2025년 기준)
        MONETIZABLE_TOPICS=(
          "AI로 월 1000만원 버는 방법"
          "무료 GCP 활용 전략"
          "유튜브 자동화로 수익 내는 법"
          "ChatGPT 4o 무제한 활용법"
          "구글 제미니로 콘텐츠 제작"
        )
        
        VIDEO_COUNT=0
        for topic in "${MONETIZABLE_TOPICS[@]}"; do
          if [ $VIDEO_COUNT -ge $MAX_VIDEOS ]; then
            echo "🚀 무료 한도 완료! 총 $VIDEO_COUNT개 영상"
            break
          fi
          
          echo "🤑 수익화 영상 생성: $topic"
          python3 src/content_generator.py --topic "$topic"
          python3 src/video_creator.py --topic "$topic"
          python3 src/thumbnail_generator.py --topic "$topic"
          python3 src/youtube_uploader.py --topic "$topic"
          
          ((VIDEO_COUNT++))
          sleep 300  # 5분 대기 (API 한도 회피)
        done
        
        echo "✅ 총 $VIDEO_COUNT개 영상 생성 완료! 예상 수익: $(($VIDEO_COUNT * 30000))원"
