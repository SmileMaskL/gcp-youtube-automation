name: GCP Youtube Automation CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: 'read'
  id-token: 'write'

env:
  SERVICE_NAME: gcp-youtube-automation
  REGION: asia-northeast3
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker asia-northeast3-docker.pkg.dev
    
    - name: Get secrets from Secret Manager
      id: secrets
      run: |
        echo "Getting secrets from Secret Manager..."
        
        # OpenAI API Key
        OPENAI_API_KEY=$(gcloud secrets versions access latest \
          --secret="openai-api-key" \
          --project="${{ env.PROJECT_ID }}")
        echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> $GITHUB_ENV
        
        # Gemini API Key
        GEMINI_API_KEY=$(gcloud secrets versions access latest \
          --secret="gemini-api-key" \
          --project="${{ env.PROJECT_ID }}")
        echo "GEMINI_API_KEY=$GEMINI_API_KEY" >> $GITHUB_ENV
        
        # ElevenLabs API Key
        ELEVENLABS_API_KEY=$(gcloud secrets versions access latest \
          --secret="elevenlabs-api-key" \
          --project="${{ env.PROJECT_ID }}")
        echo "ELEVENLABS_API_KEY=$ELEVENLABS_API_KEY" >> $GITHUB_ENV
        
        # YouTube OAuth Credentials
        YOUTUBE_CREDENTIALS=$(gcloud secrets versions access latest \
          --secret="youtube-oauth-credentials" \
          --project="${{ env.PROJECT_ID }}")
        echo "YOUTUBE_CREDENTIALS=$YOUTUBE_CREDENTIALS" >> $GITHUB_ENV
        
        # Storage Bucket Name
        STORAGE_BUCKET=$(gcloud secrets versions access latest \
          --secret="storage-bucket-name" \
          --project="${{ env.PROJECT_ID }}")
        echo "STORAGE_BUCKET=$STORAGE_BUCKET" >> $GITHUB_ENV
    
    - name: Build Docker image
      run: |
        IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        
        docker build \
          --build-arg OPENAI_API_KEY="${{ env.OPENAI_API_KEY }}" \
          --build-arg GEMINI_API_KEY="${{ env.GEMINI_API_KEY }}" \
          --build-arg ELEVENLABS_API_KEY="${{ env.ELEVENLABS_API_KEY }}" \
          --build-arg YOUTUBE_CREDENTIALS="${{ env.YOUTUBE_CREDENTIALS }}" \
          --build-arg STORAGE_BUCKET="${{ env.STORAGE_BUCKET }}" \
          --build-arg GCP_PROJECT_ID="${{ env.PROJECT_ID }}" \
          -t $IMAGE_TAG .
    
    - name: Push Docker image
      run: |
        docker push ${{ env.IMAGE_TAG }}
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image=${{ env.IMAGE_TAG }} \
          --platform=managed \
          --region=${{ env.REGION }} \
          --allow-unauthenticated \
          --memory=2Gi \
          --cpu=1 \
          --timeout=3600 \
          --concurrency=1 \
          --max-instances=1 \
          --set-env-vars="GCP_PROJECT_ID=${{ env.PROJECT_ID }}" \
          --set-env-vars="STORAGE_BUCKET=${{ env.STORAGE_BUCKET }}" \
          --service-account="${{ secrets.WIF_SERVICE_ACCOUNT }}"
    
    - name: Run content generation
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
        
        echo "Service URL: $SERVICE_URL"
        
        # 컨텐츠 생성 트리거
        curl -X POST "$SERVICE_URL/generate" \
          -H "Content-Type: application/json" \
          -d '{
            "topic": "유튜브 수익화 팁",
            "style": "informative",
            "duration": 60
          }' \
          --max-time 3600 \
          --retry 3 \
          --retry-delay 10
    
    - name: Cleanup old images (optional)
      run: |
        # Keep only the 5 most recent images
        gcloud artifacts docker images list \
          ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }} \
          --sort-by=~CREATE_TIME \
          --limit=999 \
          --format='get(digest)' | tail -n +6 | \
        xargs -I {} gcloud artifacts docker images delete \
          ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}@{} \
          --quiet || true

  # 별도 job으로 주기적 컨텐츠 생성
  generate-content:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: deploy
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Generate and upload content
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
        
        # 다양한 주제로 컨텐츠 생성
        TOPICS=(
          "유튜브 수익화 비밀"
          "돈 버는 부업 추천"
          "집에서 할 수 있는 일"
          "투자 초보 가이드"
          "시간 관리 꿀팁"
        )
        
        for topic in "${TOPICS[@]}"; do
          echo "Generating content for: $topic"
          
          curl -X POST "$SERVICE_URL/generate" \
            -H "Content-Type: application/json" \
            -d "{
              \"topic\": \"$topic\",
              \"style\": \"engaging\",
              \"duration\": $(( 45 + RANDOM % 30 ))
            }" \
            --max-time 3600 \
            --retry 2 \
            --retry-delay 30
          
          # 각 생성 사이에 대기
          sleep 300  # 5분 대기
        done
