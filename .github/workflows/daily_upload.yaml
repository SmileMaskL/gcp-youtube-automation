name: Daily YouTube Shorts Upload

on:
  schedule:
    - cron: '0 3,7,12,18,22 * * *'  # 하루 5회 실행
  workflow_dispatch:

jobs:
  generate-and-upload:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: 'read'
      id-token: 'write' # OIDC 토큰 발급 필수 (Google Cloud 인증용)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5 # 최신 버전으로 변경 (v4도 가능)
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Authenticate to Google Cloud
      id: 'auth' # ID 추가
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    - name: Set Google Application Credentials for Python
      # `auth` 스텝에서 생성된 임시 서비스 계정 키 파일의 경로를 환경 변수로 설정합니다.
      # 이 환경 변수는 Python의 google-auth 라이브러리가 기본 인증 정보를 찾는 데 사용됩니다.
      run: |
        echo "GOOGLE_APPLICATION_CREDENTIALS=${{ steps.auth.outputs.credentials_file_path }}" >> $GITHUB_ENV

    - name: Run YouTube Automation
      env:
        # Secret Manager를 통해 가져오므로, 여기에 직접 API 키를 환경 변수로 노출하지 않습니다.
        # GCP_PROJECT_ID와 GCP_BUCKET_NAME만 필요하다면 여기에 추가할 수 있습니다.
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_BUCKET_NAME: ${{ secrets.GCP_BUCKET_NAME }}
      run: |
        # `src/config.py`에서 Secret Manager를 통해 API 키를 가져오도록 설계되어 있다면
        # 여기서는 추가적인 환경 변수를 설정할 필요가 없습니다.
        # main.py에서 config.py의 Config 객체가 초기화될 때 Secret Manager 클라이언트가 사용됩니다.
        python -m src.main
